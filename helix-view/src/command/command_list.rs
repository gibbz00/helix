use super::{Command, CommandArguments};

pub const COMMAND_LIST: &'static[Command] = &[
    Command {
        name: "quit",
        aliases: &["q"],
        description: "Close the current view.",
        args: &[],
    },
    Command {
        name: "quit!",
        aliases: &["q!"],
        description: "Force close the current view, ignoring unsaved changes.",
        args: &[],
    },
    Command {
        name: "open",
        aliases: &["o"],
        description: "Open file(s)",
        args: &[FilePaths],
    },
    Command {
        name: "buffer-close",
        aliases: &["bc", "bclose"],
        description: "Close buffer(s).",
        args: &[OptionalBuffers],
    },
    Command {
        name: "buffer-close!",
        aliases: &["bc!", "bclose!"],
        description: "Close buffer(s) forcefully, ignoring unsaved changes.",
        args: &[OptionalBuffers],
    },
    Command {
        name: "buffer-close-others",
        aliases: &["bco", "bcloseother"],
        description: "Close all buffers exept the one in focus.",
        args: &[],
    },
    Command {
        name: "buffer-close-others!",
        aliases: &["bco!", "bcloseother!"],
        description: "Forcefully close all buffers exept the one in focus.",
        args: &[],
    },
    Command {
        name: "buffer-close-all",
        aliases: &["bca", "bcloseall"],
        description: "Close all buffers.",
        args: &[],
    },
    Command {
        name: "buffer-close-all!",
        aliases: &["bca!", "bcloseall!"],
        description: "Forcefully close all buffers, ignoring unsaved.",
        args: &[],
    },
    Command {
        name: "buffer-next",
        aliases: &["bn", "bnext"],
        description: "Goto next buffer.",
        args: &[],
    },
    Command {
        name: "buffer-previous",
        aliases: &["bp", "bprev"],
        description: "Goto previous buffer.",
        args: &[],
    },
    Command {
        name: "write",
        aliases: &["w"],
        description: "Write changes to disk. Accepts an optional path (:write some/path.txt)",
        args: &[OptionalFilePath],
    },
    Command {
        name: "write!",
        aliases: &["w!"],
        description: "Forcefully write changes to disk by creating necessary subdirectories. Accepts an optional path (:write some/path.txt)",
        args: &[OptionalFilePath]
    },
    Command {
        name: "new",
        aliases: &["n"],
        description: "Create a new scratch buffer.",
        args: &[],
    },
    Command {
        name: "format",
        aliases: &["fmt"],
        description: "Format file(s) with the LSP server provided formatter.",
        args: &[OptionalFilePaths],
    },
    Command {
        name: "indent-style",
        aliases: &[],
        description: "Set the indentation style. Syntax: [s,t] number. t for tabs, s for spaces. If neither s or t is supplied, number is assumed to be in spaces.",
        args: &[IndentStyle],
    },
    Command {
        name: "line-ending",
        aliases: &[],
        #[cfg(not(feature = "unicode-lines"))]
        description: "Set the document's default line ending. Options: crlf, lf.",
        #[cfg(feature = "unicode-lines")]
        description: "Set the document's default line ending. Options: crlf, lf, cr, ff, nel.",
        args: &[LineEnding],
    },
    Command {
        name: "earlier",
        aliases: &["ear"],
        description: "Jump back to an earlier point in edit history. Optionally accepts a number of steps or a time duration.",
        args: &[OptionalUndoKind],
    },
    Command {
        name: "later",
        aliases: &["lat"],
        description: "Jump to a later point in edit history. Accepts a number of steps or a time span.",
        args: &[OptionalUndoKind],
    },
    Command {
        name: "write-quit",
        aliases: &["wq", "x"],
        description: "Write changes to disk and close the current view. Accepts an optional path (:wq some/path.txt)",
        args: &[OptionalFilePath],
    },
    Command {
        name: "write-quit!",
        aliases: &["wq!", "x!"],
        description: "Write changes to disk and close the current view forcefully. Accepts an optional path (:wq! some/path.txt)",
        args: &[OptionalFilePath],
    },
    Command {
        name: "write-all",
        aliases: &["wa"],
        description: "Write changes from all buffers to disk.",
        args: &[],
    },
    Command {
        name: "write-quit-all",
        aliases: &["wqa", "xa"],
        description: "Write changes from all buffers to disk and close all views.",
        args: &[],
    },
    Command {
        name: "write-quit-all!",
        aliases: &["wqa!", "xa!"],
        description: "Write changes from all buffers to disk and close all views forcefully (ignoring unsaved changes).",
        args: &[],
    },
    Command {
        name: "quit-all",
        aliases: &["qa"],
        description: "Close all views.",
        args: &[],
    },
    Command {
        name: "quit-all!",
        aliases: &["qa!"],
        description: "Force close all views ignoring unsaved changes.",
        args: &[],
    },
    Command {
        name: "cquit",
        aliases: &["cq"],
        description: "Quit with exit code (default 1). Accepts an optional integer exit code (:cq 2).",
        args: &[],
    },
    Command {
        name: "cquit!",
        aliases: &["cq!"],
        description: "Force quit with exit code (default 1) ignoring unsaved changes. Accepts an optional integer exit code (:cq! 2).",
        args: &[],
    },
    Command {
        name: "theme",
        aliases: &[],
        description: "Change the editor theme (show current theme if no name specified).",
        args: &[OptionalTheme],
    },
    Command {
        name: "clipboard-yank",
        aliases: &[],
        description: "Yank main selection into system clipboard.",
        args: &[],
    },
    Command {
        name: "clipboard-yank-join",
        aliases: &[],
        description: "Yank joined selections into system clipboard. A separator can be provided as first argument. Default value is newline.", // FIXME: current UI can't display long doc.
        args: &[],
    },
    Command {
        name: "primary-clipboard-yank",
        aliases: &[],
        description: "Yank main selection into system primary clipboard.",
        args: &[],
    },
    Command {
        name: "primary-clipboard-yank-join",
        aliases: &[],
        description: "Yank joined selections into system primary clipboard. A separator can be provided as first argument. Default value is newline.", // FIXME: current UI can't display long doc.
        args: &[],
    },
    Command {
        name: "clipboard-paste-after",
        aliases: &[],
        description: "Paste system clipboard after selections.",
        args: &[],
    },
    Command {
        name: "clipboard-paste-before",
        aliases: &[],
        description: "Paste system clipboard before selections.",
        args: &[],
    },
    Command {
        name: "clipboard-paste-replace",
        aliases: &[],
        description: "Replace selections with content of system clipboard.",
        args: &[],
    },
    Command {
        name: "primary-clipboard-paste-after",
        aliases: &[],
        description: "Paste primary clipboard after selections.",
        args: &[],
    },
    Command {
        name: "primary-clipboard-paste-before",
        aliases: &[],
        description: "Paste primary clipboard before selections.",
        args: &[],
    },
    Command {
        name: "primary-clipboard-paste-replace",
        aliases: &[],
        description: "Replace selections with content of system primary clipboard.",
        args: &[],
    },
    Command {
        name: "show-clipboard-provider",
        aliases: &[],
        description: "Show clipboard provider name in status bar.",
        args: &[],
    },
    Command {
        name: "change-current-directory",
        aliases: &["cd"],
        description: "Change the current working directory.",
        args: &[DirectoryPath],
    },
    Command {
        name: "show-directory",
        aliases: &["pwd"],
        description: "Show the current working directory.",
        args: &[],
    },
    Command {
        name: "encoding",
        aliases: &[],
        description: "Set encoding. Based on `https://encoding.spec.whatwg.org`.",
        args: &[],
    },
    Command {
        name: "reload",
        aliases: &[],
        description: "Discard changes and reload from the source file.",
        args: &[],
    },
    Command {
        name: "reload-all",
        aliases: &[],
        description: "Discard changes and reload all documents from the source files.",
        args: &[],
    },
    Command {
        name: "update",
        aliases: &[],
        description: "Write changes only if the file has been modified.",
        args: &[],
    },
    Command {
        name: "lsp-workspace-command",
        aliases: &[],
        description: "Open workspace command picker",
        args: &[],
    },
    Command {
        name: "lsp-restart",
        aliases: &[],
        description: "Restarts the Language Server that is in use by the current doc",
        args: &[],
    },
    Command {
        name: "tree-sitter-scopes",
        aliases: &[],
        description: "Display tree sitter scopes, primarily for theming and development.",
        args: &[],
   },
    Command {
        name: "debug-start",
        aliases: &["dbg"],
        description: "Start a debug session from a given template with given parameters.",
        args: &[],
    },
    Command {
        name: "debug-remote",
        aliases: &["dbg-tcp"],
        description: "Connect to a debug adapter by TCP address and start a debugging session from a given template with given parameters.",
        args: &[],
    },
    Command {
        name: "debug-eval",
        aliases: &[],
        description: "Evaluate expression in current debug context.",
        args: &[],
    },
    Command {
        name: "vsplit",
        aliases: &["vs"],
        description: "Open file(s) in vertical splits.",
        args: &[FilePaths],
    },
    Command {
        name: "vsplit-new",
        aliases: &["vnew"],
        description: "Open a scratch buffer in a vertical split.",
        args: &[],
    },
    Command {
        name: "hsplit",
        aliases: &["hs", "sp"],
        description: "Open file(s) in horizontal splits.",
        args: &[FilePaths],
    },
    Command {
        name: "hsplit-new",
        aliases: &["hnew"],
        description: "Open a scratch buffer in a horizontal split.",
        args: &[],
    },
    Command {
        name: "tutor",
        aliases: &[],
        description: "Open the tutorial.",
        args: &[],
    },
    Command {
        name: "goto",
        aliases: &["g"],
        description: "Goto line number.",
        args: &[],
    },
    Command {
        name: "set-language",
        aliases: &["lang"],
        description: "Set the language of current buffer.",
        args: &[Languages],
    },
    Command {
        name: "set-option",
        aliases: &["set"],
        description: "Set a config option at runtime.\n To disable smart case search for example; `:set search.smart-case false`.",
        args: &[ConfigOptions],
    },
    Command {
        name: "get-option",
        aliases: &["get"],
        description: "Get the current value of a config option.",
        args: &[ConfigOptions],
    },
    Command {
        name: "sort",
        aliases: &[],
        description: "Sort ranges in selection.",
        args: &[],
    },
    Command {
        name: "rsort",
        aliases: &[],
        description: "Sort ranges in selection in reverse order.",
        args: &[],
    },
    Command {
        name: "reflow",
        aliases: &[],
        description: "Hard-wrap the current selection of lines to a given width.",
        args: &[],
    },
    Command {
        name: "tree-sitter-subtree",
        aliases: &["ts-subtree"],
        description: "Display tree sitter subtree under cursor, primarily for debugging queries.",
        args: &[],
    },
    Command {
        name: "config-reload",
        aliases: &[],
        description: "Refresh user config.",
        args: &[],
    },
    Command {
        name: "config-open",
        aliases: &[],
        description: "Open the user config.toml file.",
        args: &[],
    },
    Command {
        name: "log-open",
        aliases: &[],
        description: "Open the helix log file.",
        args: &[],
    },
    Command {
        name: "insert-output",
        aliases: &[],
        description: "Run shell command, inserting output before each selection.",
        args: &[ShellCommand],
    },
    Command {
        name: "append-output",
        aliases: &[],
        description: "Run shell command, appending output after each selection.",
        args: &[ShellCommand],
    },
    Command {
        name: "pipe",
        aliases: &[],
        description: "Pipe each selection to the shell command.",
        args: &[ShellCommand],
    },
    Command {
        name: "pipe-to",
        aliases: &[],
        description: "Pipe each selection to the shell command, ignoring output.",
        args: &[ShellCommand],
    },
    Command {
        name: "run-shell-command",
        aliases: &["sh"],
        description: "Run a shell command",
        args: &[ShellCommand],
    }
];

